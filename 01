/*
Problem:

Given a list of numbers, return whether any two sums to k. For example, given
[10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.

Bonus: Can you do this in one pass?
*/


#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define vi vector<int>
#define vll vector<long long>
#define Fast_IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(),(x).end() // can be used in sorting
#define PI 3.141592653589793238462
#define nl "\n"

//functions
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a / gcd(a, b)) * b)
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define yes puts("YES")
#define no puts("NO")
#define vecInput(arr) for(int i=0; i<(int)arr.size(); ++i) cin >> arr[i]
#define vecInputll(arr) for(ll i=0; i<(ll)arr.size(); ++i) cin >> arr[i]

bool solve(vi arr,int k){
    unordered_set<int> s;
    for(auto i : arr){
        if (s.find(k-i)!=s.end()){
            return true;
        }
        s.insert(i);
    }
    return false;
}
int main() {
    Fast_IO
    vi arr={10, 15, 3, 7};
    int k=17;
    if (solve(arr,k)) yes;
    else no;
}
